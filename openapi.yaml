openapi: 3.0.0
info:
  title: 'Cube-3 API'
  contact:
    email: leo.paillard@gmail.com
  version: 1.0.0
servers:
  -
    url: 'http://cyber-dodo.fr:8080/api/v1'
    description: 'Cube-3 API'
paths:
  /company:
    post:
      tags:
        - Company
      summary: 'Add a new company'
      operationId: 47bdad828e9f0a552214464f50cb81da
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyRequest'
      responses:
        '201':
          description: 'Company created'
        '400':
          description: 'Invalid request data'
        '404':
          description: 'License not found'
        '409':
          description: 'Company already exists'
        '500':
          description: 'Internal server error'
  /company/all:
    get:
      tags:
        - Company
      summary: 'Get all companies'
      description: 'Returns a list of all companies'
      operationId: 0795ef8f1af4038edf687ac63f47bae6
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CompanyResponse'
        '500':
          description: 'Internal server error'
  '/company/{id}':
    get:
      tags:
        - Company
      summary: 'Get a company by ID'
      description: 'Returns a company by ID'
      operationId: 0cff6c1c13b0bd5086f984d8d74604a2
      parameters:
        -
          name: id
          in: path
          description: 'ID of the company to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyResponse'
        '404':
          description: 'Company not found'
        '500':
          description: 'Internal server error'
    put:
      tags:
        - Company
      summary: 'Update a company by id'
      description: 'Updates a company by id'
      operationId: fcb5afcdb1e33614fa28d87b606c6b63
      parameters:
        -
          name: id
          in: path
          description: 'Id of the company to update'
          required: true
          schema:
            type: integer
      requestBody:
        description: 'Company data to update'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyRequest'
      responses:
        '200':
          description: 'Successful operation'
        '400':
          description: 'Invalid request data'
        '404':
          description: 'Company not found'
        '500':
          description: 'Internal server error'
    delete:
      tags:
        - Company
      summary: 'Delete a company by id'
      description: 'Deletes a company by id'
      operationId: 15e7ac770c331709ad7259cbbfd374f3
      parameters:
        -
          name: id
          in: path
          description: 'Id of the company to delete'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful operation'
        '404':
          description: 'Company not found'
        '500':
          description: 'Internal server error'
  '/company/{name}':
    get:
      tags:
        - Company
      summary: 'Get a company by name'
      description: 'Returns a company by name'
      operationId: 8d8889cf9ae0115ed4816cfd07f00258
      parameters:
        -
          name: name
          in: path
          description: 'Name of the company to return'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyResponse'
        '404':
          description: 'Company not found'
        '500':
          description: 'Internal server error'
  '/company/{companyId}/totalAmountByMonth':
    get:
      tags:
        - Company
      summary: 'Get total amount by month for a company'
      description: 'Returns the total amount by month for a company'
      operationId: 9df8a30dac3646959faad93f37f1b5e7
      parameters:
        -
          name: companyId
          in: path
          description: 'ID of the company to get the total amount by month for'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TotalByMonthResponse'
        '404':
          description: 'Company not found'
        '500':
          description: 'Internal server error'
  '/company/{companyId}/totalAmountWithVatByMonth':
    get:
      tags:
        - Company
      summary: 'Get total amount with VAT by month for a company'
      description: 'Returns the total amount with VAT by month for a company'
      operationId: eba6f6939c9aa1a10ec01732e1492b69
      parameters:
        -
          name: companyId
          in: path
          description: 'ID of the company to get the total amount with VAT by month for'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TotalByMonthResponse'
        '404':
          description: 'Company not found'
        '500':
          description: 'Internal server error'
  '/company/{companyId}/totalBuyPriceByMonth':
    get:
      tags:
        - Company
      summary: 'Get total buy price by month for a company'
      description: 'Returns the total buy price by month for a company'
      operationId: a23749d6681181372189ea99f79b8c66
      parameters:
        -
          name: companyId
          in: path
          description: 'ID of the company to get the total buy price by month for'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TotalByMonthResponse'
        '404':
          description: 'Company not found'
        '500':
          description: 'Internal server error'
  '/company/{companyId}/totalBuyPriceWithVatByMonth':
    get:
      tags:
        - Company
      summary: 'Get total buy price with VAT by month for a company'
      description: 'Returns the total buy price with VAT by month for a company'
      operationId: 04465a9c90c56f1db4d4b4d5bd4ff64a
      parameters:
        -
          name: companyId
          in: path
          description: 'ID of the company to get the total buy price with VAT by month for'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TotalByMonthResponse'
        '404':
          description: 'Company not found'
        '500':
          description: 'Internal server error'
  '/company/{companyId}/totalProfitByMonth':
    get:
      tags:
        - Company
      summary: 'Get total profit by month for a company'
      description: 'Returns the total profit by month for a company'
      operationId: 56fb424536b894ffe1edb7e83f36da08
      parameters:
        -
          name: companyId
          in: path
          description: 'ID of the company to get the total profit by month for'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TotalByMonthResponse'
        '404':
          description: 'Company not found'
        '500':
          description: 'Internal server error'
  '/company/{companyId}/totalProfitWithVatByMonth':
    get:
      tags:
        - Company
      summary: 'Get total profit with VAT by month for a company'
      description: 'Returns the total profit with VAT by month for a company'
      operationId: 453bee2bec191b96182e93c752c39d76
      parameters:
        -
          name: companyId
          in: path
          description: 'ID of the company to get the total profit with VAT by month for'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TotalByMonthResponse'
        '404':
          description: 'Company not found'
        '500':
          description: 'Internal server error'
  /companySettings:
    post:
      tags:
        - 'Company Settings'
      summary: 'Add company settings'
      operationId: adf5c02d6adfb3788649272d2aede8cf
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanySettingsRequest'
      responses:
        '201':
          description: 'Company settings created'
        '400':
          description: 'Invalid request data'
        '404':
          description: 'Company not found'
        '409':
          description: 'Company settings already exist'
        '500':
          description: 'Company settings could not be created'
  '/companySettings/{id}':
    get:
      tags:
        - 'Company Settings'
      summary: 'Get company settings by id'
      operationId: dc642a7db7a60d86c1088a90203a8bde
      parameters:
        -
          name: id
          in: path
          description: 'ID of the company settings'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Company settings found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanySettingsResponse'
        '404':
          description: 'Company settings not found'
        '500':
          description: 'Internal server error'
    put:
      tags:
        - 'Company Settings'
      summary: 'Update company settings by id'
      operationId: 7f6e8cf82b72dfe0f2fa38d27b3efcf9
      parameters:
        -
          name: id
          in: path
          description: 'ID of the company settings'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: 'Company settings object that needs to be updated'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanySettingsRequest'
      responses:
        '200':
          description: 'Company settings updated'
        '400':
          description: 'Invalid request data'
        '404':
          description: 'Company settings not found'
        '409':
          description: 'Company settings already exist'
        '500':
          description: 'Company settings could not be created'
    delete:
      tags:
        - 'Company Settings'
      summary: 'Delete company settings by id'
      operationId: 99addc2a25de698e214b45974ae8b171
      parameters:
        -
          name: id
          in: path
          description: 'ID of the company settings'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Company settings deleted'
        '404':
          description: 'Company settings not found'
        '500':
          description: 'Internal server error'
  /customer:
    post:
      tags:
        - Customer
      summary: 'Add a new customer'
      operationId: 448b50e6bad3d11d9d527fe33366a61e
      requestBody:
        description: 'Customer data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerRequest'
      responses:
        '201':
          description: 'Customer created'
        '400':
          description: 'Invalid request data'
        '404':
          description: 'Company, User or CustomerStatus not found'
        '409':
          description: 'Customer already exists'
        '500':
          description: 'Internal server error'
  /customer/all:
    get:
      tags:
        - Customer
      summary: 'Get all customers'
      operationId: fcfb5653b2927c3fe119b62807cf78eb
      responses:
        '200':
          description: 'Customers found'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomerResponse'
        '500':
          description: 'Internal server error'
  '/customer/{id}':
    get:
      tags:
        - Customer
      summary: 'Get customer by id'
      operationId: 0da629f9258ab86ebdb7b908bd3a9a7b
      parameters:
        -
          name: id
          in: path
          description: 'ID of the customer to retrieve'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Customer found'
        '404':
          description: 'Customer not found'
        '500':
          description: 'Internal server error'
    put:
      tags:
        - Customer
      summary: 'Update a customer'
      operationId: debaf18b1af5d04ee9fe39a6a4bc2676
      parameters:
        -
          name: id
          in: path
          description: 'ID of the customer to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: 'Customer data to update'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerRequest'
      responses:
        '200':
          description: 'Customer updated successfully'
        '400':
          description: 'Invalid request data'
        '404':
          description: 'Customer not found'
        '409':
          description: 'Customer already exists'
        '500':
          description: 'Internal server error'
    delete:
      tags:
        - Customer
      summary: 'Delete a customer'
      operationId: 21d795818a35e5bb74096d73661c1b34
      parameters:
        -
          name: id
          in: path
          description: 'ID of the customer to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Customer deleted successfully'
        '404':
          description: 'Customer not found'
        '500':
          description: 'Internal server error'
  '/customer/company/{id}':
    get:
      tags:
        - Customer
      summary: 'Get customers by company id'
      operationId: 0729cb6591bfe79b21488a8d746ad726
      parameters:
        -
          name: id
          in: path
          description: 'ID of the company to retrieve customers from'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Customers found'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomerResponse'
        '404':
          description: 'Customers not found'
        '500':
          description: 'Internal server error'
  /customerStatus:
    post:
      tags:
        - CustomerStatus
      summary: 'Add a new CustomerStatus'
      description: 'Add a new CustomerStatus'
      operationId: 8c9c70dd7fd5aad33b4aa9ca0aeca7f1
      requestBody:
        description: 'CustomerStatus object that needs to be added'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerStatusRequest'
      responses:
        '201':
          description: 'CustomerStatus created'
        '400':
          description: 'Invalid request data'
        '409':
          description: 'CustomerStatus already exists'
        '500':
          description: 'Internal Server Error'
  /customerStatus/all:
    get:
      tags:
        - CustomerStatus
      summary: 'Get all CustomerStatuses'
      description: 'Get all CustomerStatuses'
      operationId: 2e91e3f7a63c8570c749b80b2f07ff8e
      responses:
        '200':
          description: 'CustomerStatuses found'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomerStatusResponse'
        '500':
          description: 'Internal Server Error'
  '/customerStatus/{id}':
    get:
      tags:
        - CustomerStatus
      summary: 'Get a CustomerStatus by ID'
      description: 'Get a CustomerStatus by ID'
      operationId: 31b74378f82fccd568281ccfa86bab64
      parameters:
        -
          name: id
          in: path
          description: 'ID of the CustomerStatus to get'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'CustomerStatus found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerStatusResponse'
        '404':
          description: 'CustomerStatus not found'
        '500':
          description: 'Internal Server Error'
    put:
      tags:
        - CustomerStatus
      summary: 'Update a CustomerStatus by ID'
      description: 'Update a CustomerStatus by ID'
      operationId: d01b3cddbeb81a537e48b6712b10eec1
      parameters:
        -
          name: id
          in: path
          description: 'ID of the CustomerStatus to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: 'CustomerStatus object that needs to be updated'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerStatusRequest'
      responses:
        '200':
          description: 'CustomerStatus updated'
        '400':
          description: 'Invalid request data'
        '404':
          description: 'CustomerStatus not found'
        '409':
          description: 'CustomerStatus already exists'
        '500':
          description: 'Internal Server Error'
    delete:
      tags:
        - CustomerStatus
      summary: 'Delete a CustomerStatus by ID'
      description: 'Delete a CustomerStatus by ID'
      operationId: e4cfc93184f80a429ef1af4803229c9e
      parameters:
        -
          name: id
          in: path
          description: 'ID of the CustomerStatus to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'CustomerStatus deleted'
        '404':
          description: 'CustomerStatus not found'
        '500':
          description: 'Internal Server Error'
  /estimate:
    get:
      tags:
        - Estimate
      summary: 'Get all estimates'
      description: 'Returns all estimates'
      operationId: 8009ee5e087091fb10bb3936e9e3960e
      responses:
        '200':
          description: 'Estimates found'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EstimateResponse'
        '500':
          description: 'Internal server error'
    post:
      tags:
        - Estimate
      summary: 'Add a new estimate'
      description: 'Add a new estimate to the database'
      operationId: be65c1bbc2e06e8c56f8b3b85606c762
      requestBody:
        description: 'Estimate object that needs to be added to the database'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EstimateRequest'
      responses:
        '201':
          description: 'Estimate created'
        '400':
          description: 'Invalid request data'
        '404':
          description: 'EstimateStatus, Project, ExpiredDate not found'
        '409':
          description: 'Estimate already exists'
        '500':
          description: 'Internal server error'
  '/estimates/project/{projectId}':
    get:
      tags:
        - Estimate
      summary: 'Get all estimates by project'
      description: 'Returns all estimates by project'
      operationId: efa4215e1566b22a61ba2f185e60e615
      parameters:
        -
          name: id
          in: path
          description: 'Project id'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Estimates found'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EstimateResponse'
        '500':
          description: 'Internal server error'
  '/estimate/{id}':
    get:
      tags:
        - Estimate
      summary: 'Get estimate by id'
      description: 'Returns an estimate by id'
      operationId: 922f5a3b572c1a28efb5842ddd1a5237
      parameters:
        -
          name: id
          in: path
          description: 'ID of the estimate to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Estimate found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EstimateResponse'
        '404':
          description: 'Estimate not found'
        '500':
          description: 'Internal server error'
    put:
      tags:
        - Estimate
      summary: 'Update estimate by id'
      description: 'Updates an estimate by id'
      operationId: f81cf4ebeae788b114e8e5c288dddafe
      parameters:
        -
          name: id
          in: path
          description: 'ID of the estimate to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: 'Estimate object that needs to be updated'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EstimateRequest'
      responses:
        '200':
          description: 'Estimate updated'
        '400':
          description: 'Invalid request data'
        '404':
          description: 'Estimate not found'
        '409':
          description: 'Estimate already exists'
        '500':
          description: 'Internal server error'
    delete:
      tags:
        - Estimate
      summary: 'Delete an estimate'
      description: 'Delete an estimate by id'
      operationId: 12d217117425a66d604726ba781d40cb
      parameters:
        -
          name: id
          in: path
          description: 'ID of estimate'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Estimate deleted'
        '404':
          description: 'Estimate not found'
        '500':
          description: 'Internal Server Error'
  '/estimate/company/{companyId}':
    get:
      tags:
        - Estimate
      summary: 'Get all estimates by company'
      description: 'Returns all estimates by company'
      operationId: ac55c51da68f325589ffb5792bf72524
      parameters:
        -
          name: id
          in: path
          description: 'Company id'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Estimates found'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EstimateResponse'
        '500':
          description: 'Internal server error'
  '/estimate/customer/{customerId}':
    get:
      tags:
        - Estimate
      summary: 'Get all estimates by customer'
      description: 'Returns all estimates by customer'
      operationId: b3169617f1d386c853150aa1aaf2cb43
      parameters:
        -
          name: id
          in: path
          description: 'Customer id'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Estimates found'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EstimateResponse'
        '500':
          description: 'Internal server error'
  '/estimate/{estimateId}/product/{productId}':
    post:
      tags:
        - EstimateProduct
      summary: 'Add product to estimate'
      description: 'Add product to estimate'
      operationId: dd17cae99e8874a11bcebed4c4c2857a
      parameters:
        -
          name: estimateId
          in: path
          description: 'ID of estimate'
          required: true
          schema:
            type: integer
            format: int64
        -
          name: productId
          in: path
          description: 'ID of product'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Product added to Estimate'
        '404':
          description: 'Estimate or Product not found'
        '500':
          description: 'Internal Server Error'
    delete:
      tags:
        - EstimateProduct
      summary: 'Remove product from estimate'
      description: 'Remove product from estimate'
      operationId: 40af21a0abcc04339deb4c672d532b63
      parameters:
        -
          name: estimateId
          in: path
          description: 'ID of estimate'
          required: true
          schema:
            type: integer
            format: int64
        -
          name: productId
          in: path
          description: 'ID of product'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Product removed from Estimate'
        '404':
          description: 'Estimate, Product or EstimateProduct not found'
        '500':
          description: 'Internal Server Error'
  /estimateStatus:
    get:
      tags:
        - EstimateStatus
      summary: 'Get all EstimateStatus'
      description: 'Get all EstimateStatus'
      operationId: 7b3d73e84b903ff8c5d185f9fa92b4a5
      responses:
        '200':
          description: 'EstimateStatus found'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EstimateStatusResponse'
        '500':
          description: 'Internal Server Error'
    post:
      tags:
        - EstimateStatus
      summary: 'Add a new EstimateStatus'
      description: 'Add a new EstimateStatus'
      operationId: ab365cc1a79f1d7f6950960d5a963b63
      requestBody:
        description: 'EstimateStatus object that needs to be added'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EstimateStatusRequest'
      responses:
        '201':
          description: 'EstimateStatus created'
        '400':
          description: 'Invalid request data'
        '409':
          description: 'EstimateStatus already exists'
        '500':
          description: 'Internal Server Error'
  '/estimateStatus/{id}':
    get:
      tags:
        - EstimateStatus
      summary: 'Get EstimateStatus by ID'
      description: 'Get EstimateStatus by ID'
      operationId: 604aeb66d7051cd56304e057d4483469
      parameters:
        -
          name: id
          in: path
          description: 'ID of the EstimateStatus to get'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'EstimateStatus found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EstimateStatusResponse'
        '404':
          description: 'EstimateStatus not found'
        '500':
          description: 'Internal Server Error'
    put:
      tags:
        - EstimateStatus
      summary: 'Update EstimateStatus by ID'
      description: 'Update EstimateStatus by ID'
      operationId: c7d287d7288ad92aea69c1860f2a6811
      parameters:
        -
          name: id
          in: path
          description: 'ID of the EstimateStatus to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: 'EstimateStatus object that needs to be updated'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EstimateStatusRequest'
      responses:
        '200':
          description: 'EstimateStatus updated'
        '400':
          description: 'Invalid request data'
        '404':
          description: 'EstimateStatus not found'
        '409':
          description: 'EstimateStatus already exists'
        '500':
          description: 'Internal Server Error'
    delete:
      tags:
        - EstimateStatus
      summary: 'Delete EstimateStatus by ID'
      description: 'Delete EstimateStatus by ID'
      operationId: 98dacc585fc38de87ce2f3f7ececfbdc
      parameters:
        -
          name: id
          in: path
          description: 'ID of the EstimateStatus to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'EstimateStatus deleted'
        '404':
          description: 'EstimateStatus not found'
        '500':
          description: 'Internal Server Error'
  /invoice:
    get:
      tags:
        - Invoice
      summary: 'Get all invoices'
      operationId: 273b6afa5333336e609be70e8158ed00
      responses:
        '200':
          description: 'Invoices found'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InvoiceResponse'
        '500':
          description: 'Internal server error'
    post:
      tags:
        - Invoice
      summary: 'Create a new invoice'
      operationId: c98cbb6bec85a0f7ec2ca942242caa66
      requestBody:
        description: 'Invoice data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoiceRequest'
      responses:
        '201':
          description: 'Invoice created'
        '400':
          description: 'Invalid request data'
        '404':
          description: 'Project not found'
        '409':
          description: 'Invoice already exists'
        '500':
          description: 'Internal server error'
  '/invoice/project/{id}':
    get:
      tags:
        - Invoice
      summary: 'Get all invoices by project'
      operationId: 8fd3a42c260c4a1df7b34941d2cefad8
      parameters:
        -
          name: id
          in: path
          description: 'Project ID'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Invoices found'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InvoiceResponse'
        '500':
          description: 'Internal server error'
  '/invoice/{id}':
    get:
      tags:
        - Invoice
      summary: 'Get invoice by ID'
      operationId: 2739f583139bde343b907cc5edb66348
      parameters:
        -
          name: id
          in: path
          description: 'Invoice ID'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Invoice found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceResponse'
        '404':
          description: 'Invoice not found'
        '500':
          description: 'Internal server error'
    put:
      tags:
        - Invoice
      summary: 'Update invoice by ID'
      operationId: 8b4aa6899190860d48f031ee2bb94f97
      parameters:
        -
          name: id
          in: path
          description: 'Invoice ID'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoiceRequest'
      responses:
        '200':
          description: 'Invoice updated'
        '400':
          description: 'Invalid request data'
        '404':
          description: 'Invoice not found'
        '409':
          description: 'Invoice already exists'
        '500':
          description: 'Internal server error'
    delete:
      tags:
        - Invoice
      summary: 'Delete an invoice'
      description: 'Delete an invoice'
      operationId: bd3cbccbed059430c73a258571f8f19d
      parameters:
        -
          name: id
          in: path
          description: 'ID of the invoice to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Invoice deleted'
        '404':
          description: 'Invoice not found'
        '500':
          description: 'Internal server error'
  '/invoice/company/{companyId}':
    get:
      tags:
        - Invoice
      summary: 'Get all invoices by company'
      operationId: 578191917260d9c3149c8403fc51fe63
      parameters:
        -
          name: id
          in: path
          description: 'Company ID'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Invoices found'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InvoiceResponse'
        '500':
          description: 'Internal server error'
  '/invoice/customer/{customerId}':
    get:
      tags:
        - Invoice
      summary: 'Get all invoices by customer'
      operationId: 21bc42baae51128f3946b5b94ee6acc3
      parameters:
        -
          name: id
          in: path
          description: 'Customer ID'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Invoices found'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InvoiceResponse'
        '500':
          description: 'Internal server error'
  '/invoice/{id}/product/{productId}':
    post:
      tags:
        - InvoiceProduct
      summary: 'Add products to an invoice'
      description: 'Add products to an invoice'
      operationId: ce7862c3ca919b971b96697bff509227
      parameters:
        -
          name: id
          in: path
          description: 'ID of the invoice to update'
          required: true
          schema:
            type: integer
            format: int64
        -
          name: productId
          in: path
          description: 'ID of the product to add'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Product added to Invoice'
        '404':
          description: 'Invoice or Product not found'
        '500':
          description: 'Internal server error'
    delete:
      tags:
        - InvoiceProduct
      summary: 'Remove products from an invoice'
      description: 'Remove products from an invoice'
      operationId: 74a452e5f196c94bd6147e64dcc03b89
      parameters:
        -
          name: id
          in: path
          description: 'ID of the invoice to update'
          required: true
          schema:
            type: integer
            format: int64
        -
          name: productId
          in: path
          description: 'ID of the product to remove'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Product removed from Invoice'
        '404':
          description: 'Invoice, Product or InvoiceProduct not found'
        '500':
          description: 'Internal server error'
  /license:
    post:
      tags:
        - License
      summary: 'Add a new license'
      description: 'Add a new license to the database'
      operationId: fbdf95331b7ea6def10cac699b7480ae
      requestBody:
        description: 'License data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LicenseRequest'
      responses:
        '201':
          description: 'License created'
        '400':
          description: 'Invalid request data'
        '409':
          description: 'License already exists'
        '500':
          description: 'Internal server error'
  /license/all:
    get:
      tags:
        - License
      summary: 'Get all licenses'
      description: 'Get all licenses from the database'
      operationId: 1d1adcd6155d54d26d008a29888f2be1
      responses:
        '200':
          description: 'Licenses found'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LicenseResponse'
        '500':
          description: 'Internal server error'
  '/license/{id}':
    get:
      tags:
        - License
      summary: 'Get a license by ID'
      description: 'Get a license from the database by its ID'
      operationId: 10daf489e6b81c2e846dfbff6a7e8480
      parameters:
        -
          name: id
          in: path
          description: 'ID of the license to get'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'License found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseResponse'
        '404':
          description: 'License not found'
        '500':
          description: 'Internal server error'
    put:
      tags:
        - License
      summary: 'Update a license by ID'
      description: 'Update a license from the database by its ID'
      operationId: b05f98bcae4ed1cf88d69426ee99149a
      parameters:
        -
          name: id
          in: path
          description: 'ID of the license to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: 'License object that needs to be updated'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LicenseRequest'
      responses:
        '200':
          description: 'License updated'
        '400':
          description: 'Invalid request data'
        '404':
          description: 'License not found'
        '409':
          description: 'License already exists'
        '500':
          description: 'Internal server error'
    delete:
      tags:
        - License
      summary: 'Delete a license by ID'
      description: 'Delete a license from the database by its ID'
      operationId: 23e640b20191b952f9cda55b9b9a58d0
      parameters:
        -
          name: id
          in: path
          description: 'ID of the license to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'License deleted'
        '404':
          description: 'License not found'
        '500':
          description: 'Internal server error'
  /message:
    post:
      tags:
        - Message
      summary: 'Add a new message'
      description: 'Add a new message'
      operationId: ddc64af8f993dcd8e7c37c8ac4029f50
      requestBody:
        description: 'Message object that needs to be added'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageRequest'
      responses:
        '201':
          description: 'Message created'
        '400':
          description: 'Invalid request data'
        '409':
          description: 'Message already exists'
        '500':
          description: 'Internal server error'
  /message/all:
    get:
      tags:
        - Message
      summary: 'Get all messages'
      description: 'Get all messages'
      operationId: 8dcbe7de108be7f31d4c09a5e08f650f
      responses:
        '200':
          description: 'Messages found'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MessageResponse'
        '500':
          description: 'Internal server error'
  '/message/{id}':
    get:
      tags:
        - Message
      summary: 'Get a message by id'
      description: 'Get a message by id'
      operationId: 534b93ecd16446baa3cc9f509f0a5a7d
      parameters:
        -
          name: id
          in: path
          description: 'ID of the message to get'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Message found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '404':
          description: 'Message not found'
        '500':
          description: 'Internal server error'
    put:
      tags:
        - Message
      summary: 'Update a message by id'
      description: 'Update a message by id'
      operationId: 667ce3f51d74153d0f2397893afef32c
      parameters:
        -
          name: id
          in: path
          description: 'ID of the message to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: 'Message object that needs to be updated'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageRequest'
      responses:
        '200':
          description: 'Message updated'
        '400':
          description: 'Invalid request data'
        '404':
          description: 'Message not found'
        '409':
          description: 'Message already exists'
        '500':
          description: 'Internal server error'
    delete:
      tags:
        - Message
      summary: 'Delete a message by id'
      description: 'Delete a message by id'
      operationId: 11eddb8ef37c481aa259c8e55201c359
      parameters:
        -
          name: id
          in: path
          description: 'ID of the message to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Message deleted'
        '404':
          description: 'Message not found'
        '500':
          description: 'Internal server error'
  '/message/project/{messageId}':
    get:
      tags:
        - Message
      summary: 'Get a message by project id'
      description: 'Get a message by project id'
      operationId: 2dfb44514f17b7c86c8cc625a73660ce
      parameters:
        -
          name: id
          in: path
          description: 'ID of the project to get messages from'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Messages found'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MessageResponse'
        '404':
          description: 'Messages not found'
        '500':
          description: 'Internal server error'
  /orderForm:
    get:
      tags:
        - OrderForm
      summary: 'Get all OrderForms'
      operationId: 5f3f8774f3ba2f83fa855bfdb514bd9e
      responses:
        '200':
          description: 'OrderForms found'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderFormResponse'
        '500':
          description: 'Internal Server Error'
    post:
      tags:
        - OrderForm
      summary: 'Create a new OrderForm'
      operationId: 105ab836ac05d77987d32cbb03839696
      requestBody:
        description: 'OrderForm object that needs to be created'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderFormRequest'
      responses:
        '201':
          description: 'OrderForm created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderFormResponse'
        '400':
          description: 'Invalid request data'
        '404':
          description: 'Project not found'
        '409':
          description: 'OrderForm already exists'
        '500':
          description: 'Internal Server Error'
  '/orderForm/project/{projectId}':
    get:
      tags:
        - OrderForm
      summary: 'Get all OrderForms by project'
      operationId: 1b11175a652e40acd93c59f6a970b4c9
      parameters:
        -
          name: id
          in: path
          description: 'Project ID'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'OrderForms found'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderFormResponse'
        '500':
          description: 'Internal Server Error'
  '/orderForm/company/{id}':
    get:
      tags:
        - OrderForm
      summary: 'Get all OrderForms by company'
      operationId: 9b08921cef85bf643a328b69e2073dc8
      parameters:
        -
          name: id
          in: path
          description: 'Company ID'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'OrderForms found'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderFormResponse'
        '500':
          description: 'Internal Server Error'
  '/orderForm/{id}':
    get:
      tags:
        - OrderForm
      summary: 'Get OrderForm by ID'
      operationId: 0012d418adc60faa9f9e62bc77777f1a
      parameters:
        -
          name: id
          in: path
          description: 'ID of the OrderForm'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'OrderForm found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderFormResponse'
        '404':
          description: 'OrderForm not found'
        '500':
          description: 'Internal Server Error'
    put:
      tags:
        - OrderForm
      summary: 'Update OrderForm by ID'
      operationId: 6063b48ed698b7aaff66704272ba5281
      parameters:
        -
          name: id
          in: path
          description: 'ID of the OrderForm'
          required: true
          schema:
            type: integer
      requestBody:
        description: 'OrderForm object that needs to be updated'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderFormRequest'
      responses:
        '200':
          description: 'OrderForm updated'
        '400':
          description: 'Invalid request data'
        '404':
          description: 'OrderForm not found'
        '409':
          description: 'OrderForm already exists'
        '500':
          description: 'Internal Server Error'
    delete:
      tags:
        - OrderForm
      summary: 'Delete an order form'
      description: 'Delete an order form'
      operationId: 6cf7961455ec2c3d6ef0a110dbb0dd07
      parameters:
        -
          name: id
          in: path
          description: 'ID of the order form'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'OrderForm deleted'
        '404':
          description: 'OrderForm not found'
        '500':
          description: 'Internal Server Error'
  '/orderForm/customer/{customerId}':
    get:
      tags:
        - OrderForm
      summary: 'Get all OrderForms by customer'
      operationId: b7aaf7217cc9d879779ac51f6ae212b9
      parameters:
        -
          name: id
          in: path
          description: 'Customer ID'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'OrderForms found'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderFormResponse'
        '500':
          description: 'Internal Server Error'
  '/orderForm/{orderFormId}/product/{productId}':
    post:
      tags:
        - OrderFormProduct
      summary: 'Add products to an order form'
      description: 'Add products to an order form'
      operationId: e641a6b735f9977e74d81e6f1d3053e9
      parameters:
        -
          name: orderFormId
          in: path
          description: 'ID of the order form'
          required: true
          schema:
            type: integer
        -
          name: productId
          in: path
          description: 'ID of the product'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Product added to OrderForm'
        '404':
          description: 'OrderForm or Product not found'
        '500':
          description: 'Internal Server Error'
    delete:
      tags:
        - OrderForm
      summary: 'Remove products from an order form'
      description: 'Remove products from an order form'
      operationId: 820e392fb460e6924492c769c5ee5bfd
      parameters:
        -
          name: orderFormId
          in: path
          description: 'ID of the order form'
          required: true
          schema:
            type: integer
        -
          name: productId
          in: path
          description: 'ID of the product'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Product removed from OrderForm'
        '404':
          description: 'OrderForm, Product or OrderFormProduct not found'
        '500':
          description: 'Internal Server Error'
  /product:
    post:
      tags:
        - Product
      summary: 'Add a new product'
      operationId: 14974102cb1a0271f30ebddfd47a7019
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
      responses:
        '201':
          description: 'Product created'
        '400':
          description: 'Invalid request data'
        '409':
          description: 'Product already exists'
        '500':
          description: 'Internal server error'
  /product/all:
    get:
      tags:
        - Product
      summary: 'Get all products'
      description: 'Returns all products'
      operationId: e36b2f7452d4fb7c26217fcf420a8bba
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductResponse'
        '500':
          description: 'Internal server error'
  '/product/{id}':
    get:
      tags:
        - Product
      summary: 'Get a product by id'
      description: 'Returns a product by id'
      operationId: 8203a808a8376a231f2333ccde393c1b
      parameters:
        -
          name: id
          in: path
          description: 'ID of the product to get'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '404':
          description: 'Product not found'
        '500':
          description: 'Internal server error'
    put:
      tags:
        - Product
      summary: 'Update a product by id'
      description: 'Updates a product by id'
      operationId: e4da03dc46062b7267a98527d7c51276
      parameters:
        -
          name: id
          in: path
          description: 'ID of the product to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: 'Product object that needs to be updated'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
      responses:
        '200':
          description: 'Successful operation'
        '400':
          description: 'Invalid request data'
        '404':
          description: 'Product family, vat, company, quantity unit or supplier not found'
        '500':
          description: 'Internal server error'
    delete:
      tags:
        - Product
      summary: 'Delete a product by id'
      description: 'Deletes a product by id'
      operationId: 0c8da0dc55202af0005d5528792f6463
      parameters:
        -
          name: id
          in: path
          description: 'ID of the product to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Successful operation'
        '404':
          description: 'Product not found'
        '500':
          description: 'Internal server error'
  '/product/productFamily/{productFamilyId}':
    get:
      tags:
        - Product
      summary: 'Get a product by id'
      description: 'Returns a product by id'
      operationId: 78a132f7f9a90428fdcc764f96352df1
      parameters:
        -
          name: id
          in: path
          description: 'ID of the product family to get products'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '404':
          description: 'Product not found'
        '500':
          description: 'Internal server error'
  /productFamily:
    post:
      tags:
        - ProductFamily
      summary: 'Add a new ProductFamily'
      description: 'Add a new ProductFamily'
      operationId: ce2f074dbde444ae1acce67ce2431dac
      requestBody:
        description: 'ProductFamily object that needs to be added'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductFamilyRequest'
      responses:
        '201':
          description: 'ProductFamily created'
        '400':
          description: 'Invalid request data'
        '409':
          description: 'ProductFamily already exists'
        '500':
          description: 'Internal Server Error'
  /productFamily/all:
    get:
      tags:
        - ProductFamily
      summary: 'Get all ProductFamilies'
      description: 'Get all ProductFamilies'
      operationId: 3c895a3c21387db5f420919a38a43fee
      responses:
        '200':
          description: 'ProductFamilies found'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductFamilyResponse'
        '500':
          description: 'Internal Server Error'
  '/productFamily/{id}':
    get:
      tags:
        - ProductFamily
      summary: 'Get a ProductFamily by ID'
      description: 'Get a ProductFamily by ID'
      operationId: 659418bda197e17acb40b5ba4ddf4521
      parameters:
        -
          name: id
          in: path
          description: 'ID of the ProductFamily to get'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'ProductFamily found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductFamilyResponse'
        '404':
          description: 'ProductFamily not found'
        '500':
          description: 'Internal Server Error'
    put:
      tags:
        - ProductFamily
      summary: 'Update a ProductFamily by ID'
      description: 'Update a ProductFamily by ID'
      operationId: f6df1b2a7e13bf533c28be97f055d4b8
      parameters:
        -
          name: id
          in: path
          description: 'ID of the ProductFamily to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: 'ProductFamily object that needs to be updated'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductFamilyRequest'
      responses:
        '200':
          description: 'ProductFamily updated'
        '400':
          description: 'Invalid request data'
        '404':
          description: 'ProductFamily not found'
        '409':
          description: 'ProductFamily already exists'
        '500':
          description: 'Internal Server Error'
    delete:
      tags:
        - ProductFamily
      summary: 'Delete a ProductFamily by ID'
      description: 'Delete a ProductFamily by ID'
      operationId: d21f301592f0e9881f8ba113d3718a9a
      parameters:
        -
          name: id
          in: path
          description: 'ID of the ProductFamily to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'ProductFamily deleted'
        '404':
          description: 'ProductFamily not found'
        '500':
          description: 'Internal Server Error'
  '/productFamily/company/{companyId}':
    get:
      tags:
        - ProductFamily
      summary: 'Get all ProductFamilies by Company'
      description: 'Get all ProductFamilies by Company'
      operationId: d182cfc6eb622d94c8724f171143fa78
      parameters:
        -
          name: id
          in: path
          description: 'ID of the Company to get ProductFamilies from'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'ProductFamilies found'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductFamilyResponse'
        '404':
          description: 'ProductFamilies not found'
        '500':
          description: 'Internal Server Error'
  /project:
    post:
      tags:
        - Project
      summary: 'Add a new project'
      description: 'Add a new project to the database'
      operationId: 9081b9e2192169a55ec59d2599e718b4
      requestBody:
        description: 'Project object that needs to be added to the database'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        '201':
          description: 'Project created'
        '400':
          description: 'Invalid request data'
        '404':
          description: 'Company, User, Customer or ProjectStatus not found'
        '409':
          description: 'Project already exists'
        '500':
          description: 'Internal server error'
  /project/all:
    get:
      tags:
        - Project
      summary: 'Get all projects'
      description: 'Returns an array of all projects'
      operationId: cf90794d753204172d1d1f69894c5bad
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectResponse'
        '500':
          description: 'Internal server error'
  '/project/company/{companyId}':
    get:
      tags:
        - Project
      summary: 'Get all projects by company'
      description: 'Returns an array of all projects by company'
      operationId: 9de762011ea201db22e5fb19412d8451
      parameters:
        -
          name: id
          in: path
          description: 'ID of the company'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectResponse'
        '500':
          description: 'Internal server error'
  '/project/{id}':
    get:
      tags:
        - Project
      summary: 'Get project by ID'
      description: 'Returns a project by ID'
      operationId: b6a995d168f58dc32b01368b17579574
      parameters:
        -
          name: id
          in: path
          description: 'ID of the project'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '404':
          description: 'Project not found'
        '500':
          description: 'Internal server error'
    put:
      tags:
        - Project
      summary: 'Update project by ID'
      description: 'Updates a project by ID'
      operationId: ae3d476fe3741ad8b46dc2539855d54a
      parameters:
        -
          name: id
          in: path
          description: 'ID of the project'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: 'Project object that needs to be updated'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        '200':
          description: 'Successful operation'
        '400':
          description: 'Invalid request data'
        '404':
          description: 'Project not found'
        '409':
          description: 'Project already exists'
        '500':
          description: 'Internal server error'
    delete:
      tags:
        - Project
      summary: 'Delete project by ID'
      description: 'Deletes a project by ID'
      operationId: 30527729ad8b7a7eb62c5685943cdc30
      parameters:
        -
          name: id
          in: path
          description: 'ID of the project'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Successful operation'
        '404':
          description: 'Project not found'
        '500':
          description: 'Internal server error'
  '/project/customer/{userId}':
    get:
      tags:
        - Project
      summary: 'Get all projects by user'
      description: 'Returns an array of all projects by user'
      operationId: bd2a1909aaa3cf37c1f4bb0ba47d6f92
      parameters:
        -
          name: id
          in: path
          description: 'ID of the user'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectResponse'
        '500':
          description: 'Internal server error'
  '/project/customer/{customerId}':
    get:
      tags:
        - Project
      summary: 'Get all projects by customer'
      description: 'Returns an array of all projects by customer'
      operationId: 8835f0fe594ed175cb1da1ed7a1474f7
      parameters:
        -
          name: id
          in: path
          description: 'ID of the customer'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectResponse'
        '500':
          description: 'Internal server error'
  '/project/projectStatus/{projectStatusId}':
    get:
      tags:
        - Project
      summary: 'Get all projects by status'
      description: 'Returns an array of all projects by status'
      operationId: a06706bf9245c93ffdcf255f8273cd81
      parameters:
        -
          name: id
          in: path
          description: 'ID of the status'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectResponse'
        '500':
          description: 'Internal server error'
  '/project/{projectId}/addUser/{userId}':
    put:
      tags:
        - Project
      summary: 'Add user to project'
      description: 'Adds a user to a project'
      operationId: 5f05c12c90874026502f8b993c347825
      parameters:
        -
          name: projectId
          in: path
          description: 'ID of the project'
          required: true
          schema:
            type: integer
            format: int64
        -
          name: userId
          in: path
          description: 'ID of the user'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Successful operation'
        '404':
          description: 'Project or User not found'
        '500':
          description: 'Internal server error'
  '/project/{projectId}/removeUser/{userId}':
    put:
      tags:
        - Project
      summary: 'Remove user from project'
      description: 'Removes a user from a project'
      operationId: f0f239c0b000f5e90355815a8d626cfb
      parameters:
        -
          name: projectId
          in: path
          description: 'ID of the project'
          required: true
          schema:
            type: integer
            format: int64
        -
          name: userId
          in: path
          description: 'ID of the user'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Successful operation'
        '404':
          description: 'Project or User not found'
        '500':
          description: 'Internal server error'
  /projectStatus:
    post:
      tags:
        - ProjectStatus
      summary: 'Add a new ProjectStatus'
      description: 'Add a new ProjectStatus'
      operationId: 5aed51b721744edd91420a3251abb269
      requestBody:
        description: 'ProjectStatus object that needs to be added'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectStatusRequest'
      responses:
        '201':
          description: 'ProjectStatus created'
        '400':
          description: 'Invalid request data'
        '409':
          description: 'ProjectStatus already exists'
        '500':
          description: 'Internal Server Error'
  /projectStatus/all:
    get:
      tags:
        - ProjectStatus
      summary: 'Get all ProjectStatuses'
      description: 'Get all ProjectStatuses'
      operationId: dc6b7c114759944aeeb9ea51d523d749
      responses:
        '200':
          description: 'ProjectStatuses found'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectStatusResponse'
        '500':
          description: 'Internal Server Error'
  '/projectStatus/{id}':
    get:
      tags:
        - ProjectStatus
      summary: 'Get a ProjectStatus by ID'
      description: 'Get a ProjectStatus by ID'
      operationId: f9be2c84b4e2dcf3dfeb673e6be3897c
      parameters:
        -
          name: id
          in: path
          description: 'ID of the ProjectStatus to get'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'ProjectStatus found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectStatusResponse'
        '404':
          description: 'ProjectStatus not found'
        '500':
          description: 'Internal Server Error'
    put:
      tags:
        - ProjectStatus
      summary: 'Update a ProjectStatus by ID'
      description: 'Update a ProjectStatus by ID'
      operationId: f92283e5bdc2a5fb474bca8c899dfff6
      parameters:
        -
          name: id
          in: path
          description: 'ID of the ProjectStatus to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: 'ProjectStatus object that needs to be updated'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectStatusRequest'
      responses:
        '200':
          description: 'ProjectStatus updated'
        '400':
          description: 'Invalid request data'
        '404':
          description: 'ProjectStatus not found'
        '409':
          description: 'ProjectStatus already exists'
        '500':
          description: 'Internal Server Error'
    delete:
      tags:
        - ProjectStatus
      summary: 'Delete a ProjectStatus by ID'
      description: 'Delete a ProjectStatus by ID'
      operationId: 5c199f964e96bfdbbef696edac11c576
      parameters:
        -
          name: id
          in: path
          description: 'ID of the ProjectStatus to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'ProjectStatus deleted'
  /quantityUnit:
    post:
      tags:
        - QuantityUnit
      summary: 'Add a new QuantityUnit'
      description: 'Add a new QuantityUnit'
      operationId: e269b332c5dee28892f73ebe79a46010
      requestBody:
        description: 'QuantityUnit data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuantityUnitRequest'
      responses:
        '201':
          description: 'QuantityUnit created'
        '400':
          description: 'Invalid request data'
        '409':
          description: 'QuantityUnit already exists'
        '500':
          description: 'Internal server error'
  /quantityUnit/all:
    get:
      tags:
        - QuantityUnit
      summary: 'Get all QuantityUnits'
      description: 'Get all QuantityUnits'
      operationId: 445dd025ef1e956c15f06107c0d19a65
      responses:
        '200':
          description: 'QuantityUnits found'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuantityUnitResponse'
        '500':
          description: 'Internal server error'
  '/quantityUnit/{id}':
    get:
      tags:
        - QuantityUnit
      summary: 'Get a QuantityUnit by ID'
      description: 'Get a QuantityUnit by ID'
      operationId: 8894ebbbb0a890440fdaac2d409233ea
      parameters:
        -
          name: id
          in: path
          description: 'ID of the QuantityUnit to get'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'QuantityUnit found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuantityUnitResponse'
        '404':
          description: 'QuantityUnit not found'
        '500':
          description: 'Internal server error'
    put:
      tags:
        - QuantityUnit
      summary: 'Update a QuantityUnit by ID'
      description: 'Update a QuantityUnit by ID'
      operationId: 0a5f0a7c5a8e9ba0b5df29d6586c18c9
      parameters:
        -
          name: id
          in: path
          description: 'ID of the QuantityUnit to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: 'QuantityUnit object that needs to be updated'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuantityUnitRequest'
      responses:
        '200':
          description: 'QuantityUnit updated'
        '400':
          description: 'Invalid request data'
        '404':
          description: 'QuantityUnit not found'
        '409':
          description: 'QuantityUnit already exists'
        '500':
          description: 'Internal server error'
    delete:
      tags:
        - QuantityUnit
      summary: 'Delete a QuantityUnit by ID'
      description: 'Delete a QuantityUnit by ID'
      operationId: 6d5c6b78f3a28373679205ddddea9481
      parameters:
        -
          name: id
          in: path
          description: 'ID of the QuantityUnit to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'QuantityUnit deleted'
        '404':
          description: 'QuantityUnit not found'
        '500':
          description: 'Internal server error'
  /role:
    post:
      tags:
        - Role
      summary: 'Add a new role'
      description: 'Add a new role to the database'
      operationId: a12632e54face2d571f9ee5c2509d838
      requestBody:
        description: 'Role object that needs to be added to the database'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRequest'
      responses:
        '201':
          description: 'Role created'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Role created' }
                type: object
        '400':
          description: 'Invalid request data'
        '409':
          description: 'Role already exists'
        '500':
          description: 'Internal server error'
  /role/all:
    get:
      tags:
        - Role
      summary: 'Get all roles'
      description: 'Get all roles from the database'
      operationId: b0a28a9dffe41859400833803e3b0e9e
      responses:
        '200':
          description: 'Roles found'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoleResponse'
        '500':
          description: 'Internal server error'
  '/role/{id}':
    get:
      tags:
        - Role
      summary: 'Get a role by id'
      description: 'Get a role from the database by its id'
      operationId: e028f93d0e66781d8b722dfd20be1f50
      parameters:
        -
          name: id
          in: path
          description: 'ID of the role to get'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Role found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleResponse'
        '404':
          description: 'Role not found'
        '500':
          description: 'Internal server error'
    put:
      tags:
        - Role
      summary: 'Update a role by id'
      description: 'Update a role from the database by its id'
      operationId: 0d44461ab465956903e68c666f7abd5f
      parameters:
        -
          name: id
          in: path
          description: 'ID of the role to update'
          required: true
          schema:
            type: integer
      requestBody:
        description: 'Role object that needs to be updated'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRequest'
      responses:
        '200':
          description: 'Role updated'
        '400':
          description: 'Invalid request data'
        '404':
          description: 'Role not found'
        '409':
          description: 'Role already exists'
        '500':
          description: 'Internal server error'
    delete:
      tags:
        - Role
      summary: 'Delete a role by id'
      description: 'Delete a role from the database by its id'
      operationId: 775bb6bd3f605535dc46cb1bb7437d29
      parameters:
        -
          name: id
          in: path
          description: 'ID of the role to delete'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Role deleted'
        '404':
          description: 'Role not found'
        '500':
          description: 'Internal server error'
  /supplier:
    post:
      tags:
        - Supplier
      summary: 'Add a new supplier'
      description: 'Add a new supplier to the database'
      operationId: a612f649a5a9775e431de76419de3f86
      requestBody:
        description: 'Supplier object that needs to be added to the database'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SupplierRequest'
      responses:
        '201':
          description: 'Supplier created'
        '400':
          description: 'Invalid request data'
        '409':
          description: 'Supplier already exists'
        '500':
          description: 'Internal server error'
  /supplier/all:
    get:
      tags:
        - Supplier
      summary: 'Get all suppliers'
      description: 'Returns all suppliers from the database'
      operationId: 927efbc204f08cfe5a118dc98b5a4ce9
      responses:
        '200':
          description: 'Suppliers found'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SupplierResponse'
        '500':
          description: 'Internal server error'
  '/supplier/{id}':
    get:
      tags:
        - Supplier
      summary: 'Get a supplier by ID'
      description: 'Returns a supplier from the database by its ID'
      operationId: 8e4159f22f3a5b1122c3001e09aa890b
      parameters:
        -
          name: id
          in: path
          description: 'ID of the supplier to retrieve'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Supplier found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupplierResponse'
        '404':
          description: 'Supplier not found'
        '500':
          description: 'Internal server error'
    put:
      tags:
        - Supplier
      summary: 'Update a supplier by ID'
      description: 'Updates a supplier from the database by its ID'
      operationId: 4804eae219e28b7252147706a9e7ebff
      parameters:
        -
          name: id
          in: path
          description: 'ID of the supplier to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: 'Supplier object that needs to be updated'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SupplierRequest'
      responses:
        '200':
          description: 'Supplier updated'
        '400':
          description: 'Invalid request data'
        '404':
          description: 'Supplier not found'
        '409':
          description: 'Supplier already exists'
        '500':
          description: 'Internal server error'
    delete:
      tags:
        - Supplier
      summary: 'Delete a supplier by ID'
      description: 'Deletes a supplier from the database by its ID'
      operationId: 723d190f925fd16fcb075e69e34ae66a
      parameters:
        -
          name: id
          in: path
          description: 'ID of the supplier to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Supplier deleted'
        '404':
          description: 'Supplier not found'
        '500':
          description: 'Internal server error'
  '/supplier/company/{companyId}':
    get:
      tags:
        - Supplier
      summary: 'Get a supplier by company ID'
      description: 'Returns a supplier from the database by its company ID'
      operationId: eea54985153ca79655f0bb0c1aff8360
      parameters:
        -
          name: id
          in: path
          description: 'ID of the company to retrieve suppliers'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Supplier found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupplierResponse'
        '404':
          description: 'Supplier not found'
        '500':
          description: 'Internal server error'
  /task:
    post:
      tags:
        - Task
      summary: 'Add a new task'
      description: 'Add a new task to the database'
      operationId: 7f1ce22b98f5151d7ca2602801db555e
      requestBody:
        description: 'Task object that needs to be added to the database'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskRequest'
      responses:
        '201':
          description: 'Task created'
        '400':
          description: 'Invalid request data'
        '404':
          description: 'User, Project or TaskStatus not found'
        '409':
          description: 'Task already exists'
        '500':
          description: 'Internal server error'
  /task/all:
    get:
      tags:
        - Task
      summary: 'Get all tasks'
      description: 'Returns all tasks'
      operationId: d85a7cb58dd5f645ce501b6963fb9a32
      responses:
        '200':
          description: 'Tasks found'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskResponse'
        '500':
          description: 'Internal server error'
  '/task/user/{id}':
    get:
      tags:
        - Task
      summary: 'Get all tasks by user'
      description: 'Returns all tasks assigned to a user'
      operationId: 26b84f9fd60a949c9d2e60cb3a178f24
      parameters:
        -
          name: id
          in: path
          description: 'User ID'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Tasks found'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskResponse'
        '404':
          description: 'User not found'
        '500':
          description: 'Internal server error'
  '/task/project/{id}':
    get:
      tags:
        - Task
      summary: 'Get all tasks by project'
      description: 'Returns all tasks assigned to a project'
      operationId: 41dbadc7c0530c7542fd1f8a641466fe
      parameters:
        -
          name: id
          in: path
          description: 'Project ID'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Tasks found'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskResponse'
        '500':
          description: 'Internal server error'
  '/task/{id}':
    get:
      tags:
        - Task
      summary: 'Get task by id'
      description: 'Returns a task by id'
      operationId: 82adb562defb983aa7f09a7b1ea8224a
      parameters:
        -
          name: id
          in: path
          description: 'Task ID'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Task found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '404':
          description: 'Task not found'
        '500':
          description: 'Internal server error'
    put:
      tags:
        - Task
      summary: 'Update a task by ID'
      description: 'Update a task by ID'
      operationId: bd75423333b743d05991e8a34133a7d5
      parameters:
        -
          name: id
          in: path
          description: 'ID of the task to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: 'Task object that needs to be updated'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskRequest'
      responses:
        '200':
          description: 'Task updated'
        '400':
          description: 'Invalid request data'
        '404':
          description: 'Task not found'
        '409':
          description: 'Task already exists'
        '500':
          description: 'Internal server error'
    delete:
      tags:
        - Task
      summary: 'Deletes a task by ID'
      description: 'Deletes a task by ID'
      operationId: ca22588758e816deca16255f28fd4bef
      parameters:
        -
          name: id
          in: path
          description: 'ID of the task to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Task deleted'
        '404':
          description: 'Task not found'
        '500':
          description: 'Internal server error'
  /taskStatus:
    post:
      tags:
        - TaskStatus
      summary: 'Add a new TaskStatus'
      description: 'Add a new TaskStatus'
      operationId: 225571dfb0e0d5a07c96a9789c5d0d38
      requestBody:
        description: 'TaskStatus object that needs to be added'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskStatusRequest'
      responses:
        '201':
          description: 'TaskStatus created'
        '400':
          description: 'Invalid request data'
        '409':
          description: 'TaskStatus already exists'
        '500':
          description: 'Internal server error'
  /taskStatus/all:
    get:
      tags:
        - TaskStatus
      summary: 'Get all TaskStatuses'
      description: 'Get all TaskStatuses'
      operationId: 574512a785c0303a8126a87353d509eb
      responses:
        '200':
          description: 'TaskStatuses found'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskStatusResponse'
        '500':
          description: 'Internal server error'
  '/taskStatus/{id}':
    get:
      tags:
        - TaskStatus
      summary: 'Get TaskStatus by ID'
      description: 'Get TaskStatus by ID'
      operationId: 61695ff9439667497888b94e77feff07
      parameters:
        -
          name: id
          in: path
          description: 'ID of the TaskStatus to get'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'TaskStatus found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskStatusResponse'
        '404':
          description: 'TaskStatus not found'
        '500':
          description: 'Internal server error'
    put:
      tags:
        - TaskStatus
      summary: 'Update TaskStatus by ID'
      description: 'Update TaskStatus by ID'
      operationId: f746760afca944203e246657cdad8d8b
      parameters:
        -
          name: id
          in: path
          description: 'ID of the TaskStatus to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: 'TaskStatus object that needs to be updated'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskStatusRequest'
      responses:
        '200':
          description: 'TaskStatus updated'
        '400':
          description: 'Invalid request data'
        '404':
          description: 'TaskStatus not found'
        '409':
          description: 'TaskStatus already exists'
        '500':
          description: 'Internal server error'
    delete:
      tags:
        - TaskStatus
      summary: 'Delete TaskStatus by ID'
      description: 'Delete TaskStatus by ID'
      operationId: 3e4157a330b4f34621e17c330b6e2332
      parameters:
        -
          name: id
          in: path
          description: 'ID of the TaskStatus to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'TaskStatus deleted'
        '404':
          description: 'TaskStatus not found'
        '500':
          description: 'Internal server error'
  /taskType:
    post:
      tags:
        - TaskType
      summary: 'Add a new TaskType'
      description: 'Add a new TaskType'
      operationId: 3c26fbc12bdd72545745b224c0932233
      requestBody:
        description: 'TaskType object that needs to be added'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskTypeRequest'
      responses:
        '201':
          description: 'TaskType created'
        '400':
          description: 'Invalid request data'
        '409':
          description: 'TaskType already exists'
        '500':
          description: 'Internal server error'
  /taskType/all:
    get:
      tags:
        - TaskType
      summary: 'Get all TaskTypees'
      description: 'Get all TaskTypees'
      operationId: 97b529f2901a23f6e7b457ada75caa12
      responses:
        '200':
          description: 'TaskTypees found'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskTypeResponse'
        '500':
          description: 'Internal server error'
  '/taskType/{id}':
    get:
      tags:
        - TaskType
      summary: 'Get TaskType by ID'
      description: 'Get TaskType by ID'
      operationId: 09c2e7f8bb31febde8a95e69746eb531
      parameters:
        -
          name: id
          in: path
          description: 'ID of the TaskType to get'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'TaskType found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskTypeResponse'
        '404':
          description: 'TaskType not found'
        '500':
          description: 'Internal server error'
    put:
      tags:
        - TaskType
      summary: 'Update TaskType by ID'
      description: 'Update TaskType by ID'
      operationId: 0ff09ce3d214c81ad32264ed8741ed10
      parameters:
        -
          name: id
          in: path
          description: 'ID of the TaskType to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: 'TaskType object that needs to be updated'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskTypeRequest'
      responses:
        '200':
          description: 'TaskType updated'
        '400':
          description: 'Invalid request data'
        '404':
          description: 'TaskType not found'
        '409':
          description: 'TaskType already exists'
        '500':
          description: 'Internal server error'
    delete:
      tags:
        - TaskType
      summary: 'Delete TaskType by ID'
      description: 'Delete TaskType by ID'
      operationId: 60f7155f79e2b216d78de7ebad727c61
      parameters:
        -
          name: id
          in: path
          description: 'ID of the TaskType to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'TaskType deleted'
        '404':
          description: 'TaskType not found'
        '500':
          description: 'Internal server error'
  /user:
    post:
      tags:
        - User
      summary: 'Add a new user'
      operationId: 171791401445e886aa842a5188cea2cb
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '201':
          description: 'User created'
        '400':
          description: 'Invalid request data'
        '404':
          description: 'Role or company not found'
        '409':
          description: 'User already exists'
        '500':
          description: 'Internal server error'
  /user/all:
    get:
      tags:
        - User
      summary: 'Get all users'
      description: 'Returns all users'
      operationId: 6350a03c15157e21a3d9120bb7345f36
      responses:
        '200':
          description: 'Users found'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
        '404':
          description: 'No users found'
        '500':
          description: 'Internal server error'
  '/user/{id}':
    get:
      tags:
        - User
      summary: 'Get user by ID'
      description: 'Returns a user by ID'
      operationId: 4dee8058c89ba3e2cb8927db556a98fb
      parameters:
        -
          name: id
          in: path
          description: 'ID of the user to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'User found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: 'User not found'
        '500':
          description: 'Internal server error'
    put:
      tags:
        - User
      summary: 'Update user by ID'
      description: 'Updates a user by ID'
      operationId: cad045afb5cdb72d1f5a003c27839028
      parameters:
        -
          name: id
          in: path
          description: 'ID of the user to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: 'User data to update'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: 'User updated'
        '400':
          description: 'Invalid request data'
        '404':
          description: 'User not found'
        '409':
          description: 'User already exists'
        '500':
          description: 'Internal server error'
    delete:
      tags:
        - User
      summary: 'Delete user by ID'
      description: 'Deletes a user by ID'
      operationId: fb793005d8987f75bbfc40819b91e9f3
      parameters:
        -
          name: id
          in: path
          description: 'ID of the user to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'User deleted'
        '404':
          description: 'User not found'
        '500':
          description: 'Internal server error'
  '/user/project/{projectId}':
    get:
      tags:
        - User
      summary: 'Get user by ID'
      description: 'Returns a user by ID'
      operationId: f09a02fce3e535986ca003cf46aedcf2
      parameters:
        -
          name: id
          in: path
          description: 'ID of the user to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'User found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: 'User not found'
        '500':
          description: 'Internal server error'
  '/user/company/{companyId}':
    get:
      tags:
        - User
      summary: 'Get user by ID'
      description: 'Returns a user by ID'
      operationId: f4e0d307df580a19e3fad5bf42b98997
      parameters:
        -
          name: id
          in: path
          description: 'ID of the user to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'User found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: 'User not found'
        '500':
          description: 'Internal server error'
  /user/login:
    post:
      tags:
        - User
      summary: 'Login user'
      description: 'Logs in a user'
      operationId: f9ef097253f479dabe7bc8ff8d33f0fe
      requestBody:
        description: 'User credentials'
        required: true
        content:
          application/json:
            schema:
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: john.doe@gmail.com
                password:
                  type: string
                  format: password
                  example: password
              type: object
      responses:
        '200':
          description: 'User logged in'
          content:
            application/json:
              schema:
                properties:
                  token: { type: string, example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... }
                type: object
        '401':
          description: 'Incorrect password or company is not active'
        '404':
          description: 'User not found'
        '500':
          description: 'Internal server error'
  /user/token:
    get:
      tags:
        - User
      summary: 'Check if token is valid'
      description: 'Checks if the token is valid'
      operationId: 28ae9d996f8c546d7d817d966a14ffdf
      responses:
        '200':
          description: 'Token is valid'
        '401':
          description: Unauthorized
        '500':
          description: 'Internal server error'
  /user/me:
    get:
      tags:
        - User
      summary: 'Get current user'
      description: 'Returns the current user'
      operationId: 250c3a6a38d1c8f7ad6a76dcd164e66e
      responses:
        '200':
          description: 'User found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized
        '404':
          description: 'No users found'
        '500':
          description: 'Internal server error'
  /userSettings:
    post:
      tags:
        - 'User Settings'
      summary: 'Add user settings'
      description: 'Add user settings'
      operationId: 39b42475c2f3d82f1c23e29e3ef9a93e
      requestBody:
        description: 'User settings object that needs to be added'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSettingsRequest'
      responses:
        '201':
          description: 'User settings created successfully'
        '400':
          description: 'Invalid request data'
        '404':
          description: 'User not found'
        '500':
          description: 'Internal server error'
  '/userSettings/{id}':
    get:
      tags:
        - 'User Settings'
      summary: 'Get user settings by id'
      description: 'Get user settings by id'
      operationId: 0009048bd562a5cfb45d035037f61237
      parameters:
        -
          name: id
          in: path
          description: 'ID of user settings to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'User settings found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettingsResponse'
        '404':
          description: 'User settings not found'
        '500':
          description: 'Internal server error'
    put:
      tags:
        - 'User Settings'
      summary: 'Update user settings by id'
      description: 'Update user settings by id'
      operationId: 4b66fc6d9680246b589d54e174426a92
      parameters:
        -
          name: id
          in: path
          description: 'ID of user settings to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: 'User settings object that needs to be updated'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSettingsRequest'
      responses:
        '200':
          description: 'User settings updated successfully'
        '400':
          description: 'Invalid request data or user settings already exist'
        '404':
          description: 'User settings not found'
        '500':
          description: 'Internal server error'
    delete:
      tags:
        - 'User Settings'
      summary: 'Delete user settings by id'
      description: 'Delete user settings by id'
      operationId: f4de6962b7a545047799bcf5cb51bfdd
      parameters:
        -
          name: id
          in: path
          description: 'ID of user settings to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'User settings deleted successfully'
        '404':
          description: 'User settings not found'
        '500':
          description: 'Internal server error'
  /vat:
    post:
      tags:
        - Vat
      summary: 'Add a new vat'
      description: 'Add a new vat'
      operationId: 8e90b5533de030fe1a31e1324e5ebad6
      requestBody:
        description: 'Vat object that needs to be added'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VatRequest'
      responses:
        '201':
          description: 'Vat created'
        '400':
          description: 'Invalid request data'
        '409':
          description: 'Vat already exists'
        '500':
          description: 'Internal server error'
  /vat/all:
    get:
      tags:
        - Vat
      summary: 'Get all vats'
      description: 'Get all vats'
      operationId: 57c3582ed1e4dcc7ce0bf2edd61f89bd
      responses:
        '200':
          description: 'Vats found'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VatResponse'
        '500':
          description: 'Internal server error'
  '/vat/{id}':
    get:
      tags:
        - Vat
      summary: 'Get a vat by id'
      description: 'Get a vat by id'
      operationId: 8ab6971d070d53afeb71452fd517ceb7
      parameters:
        -
          name: id
          in: path
          description: 'ID of the vat to get'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Vat found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VatResponse'
        '404':
          description: 'Vat not found'
        '500':
          description: 'Internal server error'
    put:
      tags:
        - Vat
      summary: 'Update a vat by id'
      description: 'Update a vat by id'
      operationId: b30176989f6190163adce04fc9fc180c
      parameters:
        -
          name: id
          in: path
          description: 'ID of the vat to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: 'Vat object that needs to be updated'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VatRequest'
      responses:
        '200':
          description: 'Vat updated'
        '400':
          description: 'Invalid request data'
        '404':
          description: 'Vat not found'
        '409':
          description: 'Vat already exists'
        '500':
          description: 'Internal server error'
    delete:
      tags:
        - Vat
      summary: 'Delete a vat by id'
      description: 'Delete a vat by id'
      operationId: 8b7d14cfb0ba93d9dd8f52bc32e08d6c
      parameters:
        -
          name: id
          in: path
          description: 'ID of the vat to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Vat deleted'
        '404':
          description: 'Vat not found'
        '500':
          description: 'Internal server error'
components:
  schemas:
    CompanyRequest:
      required:
        - name
        - address
        - city
        - country
        - zipCode
        - phone
        - slogan
        - logoPath
        - license
        - language
      properties:
        name:
          type: string
          example: 'Cube 3'
        address:
          type: string
          example: '1, rue de la paix'
        city:
          type: string
          example: Paris
        country:
          type: string
          example: France
        zipCode:
          type: string
          example: '75000'
        phone:
          type: string
          example: '0123456789'
        slogan:
          type: string
          example: 'The best company ever'
        logoPath:
          type: string
          example: cube3.png
        license:
          type: integer
          example: '1'
        language:
          type: string
          example: fr
      type: object
    CompanyResponse:
      properties:
        id:
          type: integer
          example: '1'
        name:
          type: string
          example: 'Cube 3'
        address:
          type: string
          example: '1, rue de la paix'
        city:
          type: string
          example: Paris
        country:
          type: string
          example: France
        zipCode:
          type: string
          example: '75000'
        phone:
          type: string
          example: '0123456789'
        slogan:
          type: string
          example: 'The best company ever'
        logoPath:
          type: string
          example: cube3.png
        license:
          $ref: '#/components/schemas/LicenseResponse'
        language:
          type: string
          example: fr
        licenseExpirationDate:
          type: string
          format: date-time
          example: '2021-01-01 00:00:00'
        createdAt:
          type: string
          format: date-time
          example: '2021-01-01 00:00:00'
        updatedAt:
          type: string
          format: date-time
          example: '2021-01-01 00:00:00'
      type: object
    TotalByMonthResponse:
      properties:
        06-2020:
          type: string
          format: date-time
          example: '3656.00'
        07-2020:
          type: string
          format: date-time
          example: '3756.00'
        08-2020:
          type: string
          format: date-time
          example: '3856.00'
        09-2020:
          type: string
          format: date-time
          example: '3956.00'
      type: object
    CompanySettingsRequest:
      required:
        - primaryColor
        - secondaryColor
        - tertiaryColor
        - company
      properties:
        primaryColor:
          type: string
          example: '#000000'
        secondaryColor:
          type: string
          example: '#000000'
        tertiaryColor:
          type: string
          example: '#000000'
        company:
          type: integer
          example: 1
      type: object
    CompanySettingsResponse:
      properties:
        id:
          type: integer
        primaryColor:
          type: string
          example: '#000000'
        secondaryColor:
          type: string
          example: '#000000'
        tertiaryColor:
          type: string
          example: '#000000'
        company:
          $ref: '#/components/schemas/CompanyResponse'
        created_at:
          type: string
          format: date-time
          example: '2021-01-01 00:00:00'
        updated_at:
          type: string
          format: date-time
          example: '2021-01-01 00:00:00'
      type: object
    CustomerRequest:
      required:
        - firstName
        - lastName
        - email
        - address
        - city
        - country
        - zipCode
        - phone
        - company
        - status
      properties:
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          format: email
          example: john-doe@gmail.com
        address:
          type: string
          example: '1, rue de la Paix'
        city:
          type: string
          example: Paris
        country:
          type: string
          example: France
        zipCode:
          type: string
          example: '75000'
        phone:
          type: string
          example: '0123456789'
        company:
          type: integer
          example: '1'
        status:
          type: integer
          example: '1'
      type: object
    CustomerResponse:
      properties:
        id:
          type: integer
          example: '1'
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          format: email
          example: john-doe@gmail.com
        address:
          type: string
          example: '1, rue de la Paix'
        city:
          type: string
          example: Paris
        country:
          type: string
          example: France
        zipCode:
          type: string
          example: '75000'
        phone:
          type: string
          example: '0123456789'
        company:
          $ref: '#/components/schemas/CompanyResponse'
        status:
          $ref: '#/components/schemas/CustomerStatusResponse'
        createdAt:
          type: string
          format: date-time
          example: '2021-01-01 00:00:00'
        updatedAt:
          type: string
          format: date-time
          example: '2021-01-01 00:00:00'
      type: object
    CustomerStatusRequest:
      required:
        - name
        - description
      properties:
        name:
          type: string
          example: 'CustomerStatus 1'
        description:
          type: string
          example: 'This is the first customerStatus'
      type: object
    CustomerStatusResponse:
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'CustomerStatus 1'
        description:
          type: string
          example: 'This is the first customerStatus'
        createdAt:
          type: string
          format: date-time
          example: '2021-01-01 00:00:00'
        updatedAt:
          type: string
          format: date-time
          example: '2021-01-01 00:00:00'
      type: object
    EstimateRequest:
      required:
        - name
        - description
        - project
        - expiredAt
        - estimateStatus
      properties:
        name:
          type: string
          example: 'Estimate name'
        description:
          type: string
          example: 'Estimate description'
        project:
          type: integer
          example: '1'
        expiredAt:
          type: string
          format: date-time
          example: '2021-01-01 00:00:00'
        estimateStatus:
          type: integer
          example: '1'
      type: object
    EstimateProductRequest:
      required:
        - estimate
        - product
        - quantity
      properties:
        estimate:
          type: integer
          example: '1'
        product:
          type: integer
          example: '1'
        quantity:
          type: integer
          example: '1'
      type: object
    EstimateResponse:
      properties:
        id:
          type: integer
          example: '1'
        name:
          type: string
          example: 'Estimate name'
        description:
          type: string
          example: 'Estimate description'
        project:
          $ref: '#/components/schemas/ProjectResponse'
        expiredAt:
          type: string
          format: date-time
          example: '2021-01-01 00:00:00'
        estimateStatus:
          type: integer
          example: '1'
        estimateProducts:
          type: array
          items:
            $ref: '#/components/schemas/EstimateProductResponse'
        createdAt:
          type: string
          format: date-time
          example: '2021-01-01 00:00:00'
        updatedAt:
          type: string
          format: date-time
          example: '2021-01-01 00:00:00'
      type: object
    EstimateProductResponse:
      properties:
        id:
          type: integer
          example: '1'
        estimate:
          $ref: '#/components/schemas/EstimateResponse'
        product:
          $ref: '#/components/schemas/ProductResponse'
        quantity:
          type: integer
          example: '1'
        createdAt:
          type: string
          format: date-time
          example: '2021-01-01 00:00:00'
        updatedAt:
          type: string
          format: date-time
          example: '2021-01-01 00:00:00'
      type: object
    EstimateStatusRequest:
      required:
        - name
        - description
      properties:
        name:
          type: string
          example: 'EstimateStatus 1'
        description:
          type: string
          example: 'This is the first estimateStatus'
      type: object
    EstimateStatusResponse:
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'EstimateStatus 1'
        description:
          type: string
          example: 'This is the first estimateStatus'
        createdAt:
          type: string
          format: date-time
          example: '2021-01-01 00:00:00'
        updatedAt:
          type: string
          format: date-time
          example: '2021-01-01 00:00:00'
      type: object
    InvoiceRequest:
      required:
        - name
        - description
        - project
      properties:
        name:
          type: string
          example: 'Invoice 1'
        description:
          type: string
          example: 'This is the first invoice'
        project:
          type: integer
          example: 1
      type: object
    InvoiceResponse:
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'Invoice 1'
        description:
          type: string
          example: 'This is the first invoice'
        project:
          $ref: '#/components/schemas/ProjectResponse'
        products:
          type: array
          items:
            $ref: '#/components/schemas/InvoiceProductResponse'
        createdAt:
          type: string
          example: '2021-01-01 00:00:00'
        updatedAt:
          type: string
          example: '2021-01-01 00:00:00'
      type: object
    InvoiceProductRequest:
      required:
        - invoice
        - product
        - quantity
      properties:
        invoice:
          type: integer
          example: 1
        product:
          type: integer
          example: 1
        quantity:
          type: integer
          example: 1
      type: object
    InvoiceProductResponse:
      properties:
        id:
          type: integer
          example: 1
        invoice:
          $ref: '#/components/schemas/InvoiceResponse'
        product:
          $ref: '#/components/schemas/ProductResponse'
        quantity:
          type: integer
          example: 1
        createdAt:
          type: string
          example: '2021-01-01 00:00:00'
        updatedAt:
          type: string
          example: '2021-01-01 00:00:00'
      type: object
    LicenseRequest:
      required:
        - name
        - description
        - price
        - maxUsers
        - validityPeriod
      properties:
        name:
          type: string
          example: basic
        description:
          type: string
          example: 'basic license for 1 user'
        price:
          type: integer
          example: 100
        maxUsers:
          type: integer
          example: 1
        validityPeriod:
          type: integer
          example: 1
      type: object
    LicenseResponse:
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: basic
        description:
          type: string
          example: 'basic license for 1 user'
        price:
          type: integer
          example: 100
        maxUsers:
          type: integer
          example: 1
        validityPeriod:
          type: integer
          example: 1
        createdAt:
          type: string
          format: date-time
          example: '2021-09-30 12:00:00'
        updatedAt:
          type: string
          format: date-time
          example: '2021-09-30 12:00:00'
      type: object
    MessageRequest:
      required:
        - sender
        - project
        - message
      properties:
        sender:
          type: integer
          example: 1
        project:
          type: integer
          example: 1
        message:
          type: string
          example: 'Hello world'
      type: object
    MessageResponse:
      properties:
        id:
          type: integer
          example: 1
        sender:
          type: integer
          example: 1
        project:
          type: integer
          example: 1
        message:
          type: string
          example: 'Hello world'
        createdAt:
          type: string
          format: date-time
          example: '2021-01-01 00:00:00'
        updatedAt:
          type: string
          format: date-time
          example: '2021-01-01 00:00:00'
      type: object
    OrderFormRequest:
      required:
        - name
        - description
        - project
      properties:
        name:
          type: string
          example: 'OrderForm 1'
        description:
          type: string
          example: 'This is the first orderForm'
        project:
          type: integer
          example: 1
      type: object
    OrderFormResponse:
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'OrderForm 1'
        description:
          type: string
          example: 'This is the first orderForm'
        project:
          $ref: '#/components/schemas/ProjectResponse'
        orderFormProducts:
          type: array
          items:
            $ref: '#/components/schemas/OrderFormProductResponse'
        createdAt:
          type: string
          format: date-time
          example: '2021-01-01 00:00:00'
        updatedAt:
          type: string
          format: date-time
          example: '2021-01-01 00:00:00'
      type: object
    OrderFormProductResponse:
      properties:
        id:
          type: integer
          example: 1
        orderForm:
          $ref: '#/components/schemas/OrderFormResponse'
        product:
          $ref: '#/components/schemas/ProductResponse'
        quantity:
          type: integer
          example: 1
        createdAt:
          type: string
          format: date-time
          example: '2021-01-01 00:00:00'
        updatedAt:
          type: string
          format: date-time
          example: '2021-01-01 00:00:00'
      type: object
    OrderFormProductRequest:
      required:
        - orderForm
        - product
        - quantity
      properties:
        orderForm:
          type: integer
          example: 1
        product:
          type: integer
          example: 1
        quantity:
          type: integer
          example: 1
      type: object
    ProductRequest:
      required:
        - name
        - description
        - buyPrice
        - sellPrice
        - quantity
        - discount
        - isDiscount
        - productFamily
        - vat
        - company
        - quantityUnit
        - supplier
      properties:
        name:
          type: string
          example: Jambon
        description:
          type: string
          example: 'Jambon de Paris'
        buyPrice:
          type: integer
          example: 10
        sellPrice:
          type: integer
          example: 15
        quantity:
          type: integer
          example: 10
        discount:
          type: integer
          example: 0
        isDiscount:
          type: boolean
          example: false
        productFamily:
          type: integer
          example: 1
        vat:
          type: integer
          example: 1
        company:
          type: integer
          example: 1
        quantityUnit:
          type: integer
          example: 1
        supplier:
          type: integer
          example: 1
      type: object
    ProductResponse:
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Jambon
        description:
          type: string
          example: 'Jambon de Paris'
        buyPrice:
          type: integer
          example: 10
        sellPrice:
          type: integer
          example: 15
        quantity:
          type: integer
          example: 10
        discount:
          type: integer
          example: 0
        isDiscount:
          type: boolean
          example: false
        productFamily:
          $ref: '#/components/schemas/ProductFamilyResponse'
        vat:
          $ref: '#/components/schemas/VatResponse'
        company:
          $ref: '#/components/schemas/CompanyResponse'
        quantityUnit:
          $ref: '#/components/schemas/QuantityUnitResponse'
        supplier:
          type: integer
          example: 1
        createdAt:
          type: string
          format: date-time
          example: '2021-03-01 00:00:00'
        updatedAt:
          type: string
          format: date-time
          example: '2021-03-01 00:00:00'
      type: object
    ProductFamilyRequest:
      required:
        - name
        - description
      properties:
        name:
          type: string
          example: 'Salle de Bain'
        description:
          type: string
          example: 'Catégorie regroupant tous les produits pour la salle de bain'
        company:
          type: integer
          example: 1
      type: object
    ProductFamilyResponse:
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'Salle de Bain'
        description:
          type: string
          example: 'Catégorie regroupant tous les produits pour la salle de bain'
        company:
          $ref: '#/components/schemas/CompanyResponse'
        createdAt:
          type: string
          format: date-time
          example: '2021-03-01 00:00:00'
        updatedAt:
          type: string
          format: date-time
          example: '2021-03-01 00:00:00'
      type: object
    ProjectRequest:
      required:
        - name
        - description
        - company
        - creator
        - customer
        - projectStatus
      properties:
        name:
          type: string
          example: 'Project 1'
        description:
          type: string
          example: 'This is the first project'
        company:
          type: integer
          example: '1'
        creator:
          type: integer
          example: '1'
        customer:
          type: integer
          example: '1'
        projectStatus:
          type: integer
          example: '1'
      type: object
    ProjectResponse:
      properties:
        id:
          type: integer
          example: '1'
        name:
          type: string
          example: 'Project 1'
        description:
          type: string
          example: 'This is the first project'
        company:
          $ref: '#/components/schemas/CompanyResponse'
        creator:
          $ref: '#/components/schemas/UserResponse'
        customer:
          $ref: '#/components/schemas/CustomerResponse'
        projectStatus:
          type: integer
          example: '1'
        createdAt:
          type: string
          format: date-time
          example: '2021-01-01 00:00:00'
        updatedAt:
          type: string
          format: date-time
          example: '2021-01-01 00:00:00'
      type: object
    ProjectStatusRequest:
      required:
        - name
        - description
      properties:
        name:
          type: string
          example: 'ProjectStatus 1'
        description:
          type: string
          example: 'This is the first projectStatus'
      type: object
    ProjectStatusResponse:
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'ProjectStatus 1'
        description:
          type: string
          example: 'This is the first projectStatus'
        createdAt:
          type: string
          format: date-time
          example: '2021-01-01 00:00:00'
        updatedAt:
          type: string
          format: date-time
          example: '2021-01-01 00:00:00'
      type: object
    QuantityUnitRequest:
      required:
        - name
        - unit
        - description
      properties:
        name:
          type: string
          example: Litre
        unit:
          type: string
          example: l
        description:
          type: string
          example: Litre
      type: object
    QuantityUnitResponse:
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Litre
        unit:
          type: string
          example: l
        description:
          type: string
          example: Litre
        createdAt:
          type: string
          format: date-time
          example: '2021-03-01 00:00:00'
        updatedAt:
          type: string
          format: date-time
          example: '2021-03-01 00:00:00'
      type: object
    RoleRequest:
      required:
        - name
        - description
      properties:
        name:
          type: string
          example: Admin
        description:
          type: string
          example: Administrator
      type: object
    RoleResponse:
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Admin
        description:
          type: string
          example: Administrator
        createdAt:
          type: string
          format: date-time
          example: '2021-01-01 00:00:00'
        updatedAt:
          type: string
          format: date-time
          example: '2021-01-01 00:00:00'
      type: object
    SupplierRequest:
      required:
        - name
        - firstName
        - lastName
        - email
        - address
        - city
        - country
        - zipCode
        - phone
        - company
      properties:
        name:
          type: string
          example: Aubade
        firstName:
          type: string
          example: Jean
        lastName:
          type: string
          example: Dupont
        email:
          type: string
          format: email
          example: jean.dupont@aubade
        address:
          type: string
          example: '1 rue de la lingerie'
        city:
          type: string
          example: Paris
        country:
          type: string
          example: France
        zipCode:
          type: string
          example: '75000'
        phone:
          type: string
          example: '0123456789'
        company:
          type: integer
          example: 1
      type: object
    SupplierResponse:
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Aubade
        firstName:
          type: string
          example: Jean
        lastName:
          type: string
          example: Dupont
        email:
          type: string
          format: email
          example: jean.dupont@aubade
        address:
          type: string
          example: '1 rue de la lingerie'
        city:
          type: string
          example: Paris
        country:
          type: string
          example: France
        zipCode:
          type: string
          example: '75000'
        phone:
          type: string
          example: '0123456789'
        company:
          $ref: '#/components/schemas/CompanyResponse'
        createdAt:
          type: string
          format: date-time
          example: '2021-03-01 00:00:00'
        updatedAt:
          type: string
          format: date-time
          example: '2021-03-01 00:00:00'
      type: object
    TaskRequest:
      required:
        - title
        - description
        - location
        - dueDate
        - project
        - user
        - taskStatus
      properties:
        title:
          type: string
          example: 'Task 1'
        description:
          type: string
          example: 'This is the first task'
        location:
          type: string
          example: 'Location 1'
        dueDate:
          type: string
          example: '2021-01-01'
        project:
          type: integer
          example: 1
        user:
          type: integer
          example: 1
        taskStatus:
          type: integer
          example: 1
        taskType:
          type: integer
          example: 1
      type: object
    TaskResponse:
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: 'Task 1'
        description:
          type: string
          example: 'This is the first task'
        location:
          type: string
          example: 'Location 1'
        dueDate:
          type: string
          example: '2021-01-01'
        project:
          $ref: '#/components/schemas/ProjectResponse'
        user:
          $ref: '#/components/schemas/UserResponse'
        taskStatus:
          $ref: '#/components/schemas/TaskStatusResponse'
        taskType:
          $ref: '#/components/schemas/TaskTypeResponse'
        createdAt:
          type: string
          format: date-time
          example: '2021-01-01 00:00:00'
        updatedAt:
          type: string
          format: date-time
          example: '2021-01-01 00:00:00'
      type: object
    TaskStatusRequest:
      required:
        - name
        - description
      properties:
        name:
          type: string
          example: 'TaskStatus 1'
        description:
          type: string
          example: 'This is the first taskStatus'
      type: object
    TaskStatusResponse:
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'TaskStatus 1'
        description:
          type: string
          example: 'This is the first taskStatus'
        createdAt:
          type: string
          format: date-time
          example: '2021-01-01 00:00:00'
        updatedAt:
          type: string
          format: date-time
          example: '2021-01-01 00:00:00'
      type: object
    TaskTypeRequest:
      required:
        - name
        - description
      properties:
        name:
          type: string
          example: 'TaskStatus 1'
        description:
          type: string
          example: 'This is the first taskStatus'
      type: object
    TaskTypeResponse:
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'TaskStatus 1'
        description:
          type: string
          example: 'This is the first taskStatus'
        createdAt:
          type: string
          format: date-time
          example: '2021-01-01 00:00:00'
        updatedAt:
          type: string
          format: date-time
          example: '2021-01-01 00:00:00'
      type: object
    UserRequest:
      required:
        - firstName
        - lastName
        - email
        - password
        - job
        - phone
        - role
        - company
      properties:
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: john.doe@gmail.com
        password:
          type: string
          format: password
          example: password
        job:
          type: string
          example: Developer
        phone:
          type: string
          example: '0123456789'
        role:
          type: integer
          example: '1'
        company:
          type: integer
          example: '1'
      type: object
    UserResponse:
      properties:
        id:
          type: integer
          example: '1'
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: john.doe@gmail.com
        job:
          type: string
          example: Developer
        phone:
          type: string
          example: '0123456789'
        role:
          $ref: '#/components/schemas/RoleResponse'
        company:
          type: integer
          example: '1'
        createdAt:
          type: string
          format: date-time
          example: '2021-03-01 00:00:00'
        updatedAt:
          type: string
          format: date-time
          example: '2021-03-01 00:00:00'
      type: object
    UserSettingsRequest:
      required:
        - theme
        - language
        - user-id
      properties:
        theme:
          type: string
          example: dark
        language:
          type: string
          example: en
        user-id:
          type: integer
          example: '1'
      type: object
    UserSettingsResponse:
      required:
        - id
        - theme
        - language
        - user-id
      properties:
        id:
          type: integer
          example: '1'
        theme:
          type: string
          example: dark
        language:
          type: string
          example: en
        user:
          $ref: '#/components/schemas/UserResponse'
        created-at:
          type: string
          format: date-time
          example: '2021-01-01 00:00:00'
        updated-at:
          type: string
          format: date-time
          example: '2021-01-01 00:00:00'
      type: object
    VatRequest:
      required:
        - name
        - rate
        - description
      properties:
        name:
          type: string
          example: 20%
        rate:
          type: integer
          example: 20
        description:
          type: string
          example: '20% VAT'
      type: object
    VatResponse:
      required:
        - id
        - name
        - rate
        - description
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 20%
        rate:
          type: integer
          example: 20
        description:
          type: string
          example: '20% VAT'
        createdAt:
          type: string
          format: date-time
          example: '2021-01-01 00:00:00'
        updatedAt:
          type: string
          format: date-time
          example: '2021-01-01 00:00:00'
      type: object
  responses:
    '404':
      description: 'ProjectStatus not found'
    '500':
      description: 'Internal Server Error'
  securitySchemes:
    bearer:
      type: http
      bearerFormat: JWT
